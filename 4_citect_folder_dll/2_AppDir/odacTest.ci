OBJECT hODAC;
// Функция создания пользователя
INT FUNCTION dbUserCreate(STRING sXML, STRING sPathSQL, STRING dsn, STRING sUser)
	STRING 	sPathDll = PathToStr("[RUN]:dll\cioda.dll");
	STRING  sName=sUser;
	STRING  sPassword;
	INT     bDone;
	INT     nStatus;
	INT 	conId;
	
	IF DllClassIsValid( hODAC ) THEN
		bDone = FALSE;
		WHILE bDone = FALSE DO
			FormNew("@(Login Form)", 35, 5, 5);
			FormInput(1, 0, StrPad(StrToLocalText("@(Name)")," ",10), sName, 20);
			FormPassword(1, 2, StrPad(StrToLocalText("@(Password)")," ",12), sPassword, 20);
			FormButton( 1, 4, StrPad("    @(OK)"," ",13), 0, 1);
			FormButton(18, 4, StrPad("  @(Cancel)"," ",13), 0, 2);
			IF FormRead(0) = 0 THEN
				conId = DllClassCallMethod(hODAC, "osavedbuser", sXML, sPathSQL, dsn, sName, sPassword);
				IF conId = 0 THEN
					bDone = TRUE;
					nStatus = 0;
					Message("@(Info)", "@(Verification successful)", 0)
				ELSE
					sPassword = "";
					Message("@(Info)", "@(Verification not successful)", 0)
				END
			ELSE
				bDone = TRUE;
				nStatus = 298;
			END
		END
	ELSE
		bDone = TRUE;
		nStatus = 360;
	END
	RETURN nStatus;
END
// Функция инициализации объекта работы с БД
INT
FUNCTION initCIODA(STRING sPathDll)
	INT rc=0;
	STRING sPathLog = PathToStr("[RUN]:log");

	hODAC = DllClassCreate(sPathDll, "cioda");
	IF DllClassIsValid( hODAC ) THEN
		DllClassCallMethod(hODAC, "initlog", sPathLog);
		rc=1;
	END
	RETURN rc;
END
// Функция закрытия объекта работы с БД
FUNCTION disposeCIODA()
	DllClassDispose(hODAC);	
END

FUNCTION RunDllTest()
	STRING sXML = PathToStr("[RUN]:dll\appcfg.xml");
	STRING sPathSQL = ".//SQL";
	INT hDoc, hNode;
	STRING sUser, sPwd;
	STRING sPathDll = PathToStr("[RUN]:dll\cioda.dll");
	STRING sDSN;
	INT fLog;
	
// создадим объект cioda для работы с БД и логами
	IF initCIODA( sPathDll ) THEN
// секция инициализации пользователя	
		ErrSet(1);
		hDoc=XMLOpen( sXML );
		IF hDoc <> -1 THEN
			hNode=XMLNodeFind( hDoc, sPathSQL );
			IF hNode <> -1 THEN
				fLog=XMLGetAttribute(hDoc,hNode,"fulllog");
				sDSN=XMLGetAttribute(hDoc,hNode,"dsn");
				sUser=XMLGetAttribute(hDoc,hNode,"user");
				sPwd=XMLGetAttribute(hDoc,hNode,"code");
				IF StrLength(sUser)=0 OR StrLength(sDSN)=0 THEN
					Message(StrToLocalText("@(Fatal Error)"), StrToLocalText("@(Username or database source not found)"), 48);
					ELSE IF StrLength(sPwd)=0 THEN				// если пароль не найден, создадим его
						dbUserCreate(sXML, sPathSQL, sDSN, sUser);
					END
				END
			END 
			XMLClose(hDoc);
			DllClassSetProperty(hODAC, "fLog", fLog);
		END
		ErrSet(0);
// конец секции инициализации пользователя	
		TaskNew("task1", "", 8);
		SleepMS(100);
		TaskNew("task2", "", 8);
	ELSE 
		Message(StrToLocalText("@(Fatal Error)"), StrToLocalText("@(DLL not found)")+ " " + sPathDll, 48);
	END
END

FUNCTION task1()
	INT rc=-1;
	INT conId1;
	INT stmtId1;
	STRING sXML = PathToStr("[RUN]:dll\appcfg.xml");
	STRING sPathSQL = ".//SQL";

	// 1. подключаемся к БД
	conId1 = DllClassCallMethod( hODAC, "oconnecthidden", sXML, sPathSQL );
	IF conId1 THEN
		rc=DllClassCallMethod( hODAC, "opostconnect", conId1, "eagle_park", "" );
	END
	IF NOT rc THEN
		// 2. составляем параметризированный запрос без выборки строк	
	    stmtId1= DllClassCallMethod( hODAC, "osetstatement", ".//Select[@name=^"test insert1^"]", sXML );
	    DllClassCallMethod( hODAC, "osetparameter", stmtId1, ":density", "0.7777" );	
		// 2а. выполним запрос 
	    DllClassCallMethod( hODAC, "oexecute", conId1, stmtId1 );
	    // 2б. очистим кэш	
//	    DllClassCallMethod( hODAC, "oclrstatement", stmtId1 );
	    DllClassCallMethod( hODAC, "oend", stmtId1 );
	    
		// 3. делаем запросы на insert и update по биндлистам
	    DllClassCallMethod( hODAC, "oinsert", conId1, ".//BindList[@name=^"INSERT_SENSOR_READING_OBJ^"]", sXML, 112 );
	    DllClassCallMethod( hODAC, "oupdate", conId1, ".//BindList[@name=^"UPDTEST^"]", sXML, 3 );
	END
	
	IF conId1 THEN
		// 4. Отключаемся от БД
	   	DllClassCallMethod(hODAC, "odisconnect", conId1);
	END
END

FUNCTION task2()
	INT rc=-1;
	INT conId2;
	INT stmtId2;
	STRING sXML = PathToStr("[RUN]:dll\appcfg.xml");
	STRING sPathSQL = ".//SQL";
	INT recordsCount;
	
	LogMessageErr("Тест лога ошибок");
	LogMessage("Подключаемся к БД из потока 2");
	
	// 1. подключаемся к БД
	conId2 = DllClassCallMethod( hODAC, "oconnecthidden", sXML, sPathSQL );
	IF conId2 THEN
		rc = DllClassCallMethod( hODAC, "opostconnect", conId2, "eagle_park", "" );
	END
	
	IF NOT rc THEN
		// 2. проверяем Select
	    stmtId2= DllClassCallMethod( hODAC, "osetstatement", ".//Select[@name=^"TANKINFO^"]", sXML );
	    DllClassCallMethod( hODAC, "osetparameter", stmtId2, ":seqno1", "10" );	
	    DllClassCallMethod( hODAC, "osetparameter", stmtId2, ":seqno2", "20" );	
	    DllClassCallMethod( hODAC, "oaddbindlist", stmtId2, ".//BindList[@name=^"TANKINI^"]", sXML );
		// 2а. выполним запрос 
	    DllClassCallMethod( hODAC, "oexecute", conId2, stmtId2 );
	    recordsCount = DllClassCallMethod( hODAC, "ogetrecordnumber", stmtId2 );
	    LogMessage( "Получено записей: " + recordsCount:# );
		// 2б. выберем записи 
	    DllClassCallMethod( hODAC, "ogetrecord", stmtId2, 2, 3 );
	    DllClassCallMethod( hODAC, "ogetrecord", stmtId2, 3, 4 );
		// 2в. очистим кэш
	    DllClassCallMethod( hODAC, "oend", stmtId2 );
	    
		// 3. делаем запросы на insert и update по биндлистам
	    DllClassCallMethod( hODAC, "oinsert", conId2, ".//BindList[@name=^"INSERT_SENSOR_READING^"]", sXML, 3 );
	    DllClassCallMethod( hODAC, "oupdate", conId2, ".//BindList[@name=^"UPDTEST^"]", sXML, 4 );
	END
	
	// 4. Отключаемся от БД
	IF conId2 THEN
		DllClassCallMethod(hODAC, "odisconnect", conId2);
	END
	// 5. Уничтожим подключенный объект cioda
	disposeCIODA();
END

FUNCTION LogMessage(STRING mess)
	DllClassCallMethod( hODAC, "log", mess );
END

FUNCTION LogMessageErr(STRING mess)
	DllClassCallMethod( hODAC, "logerr", mess );
END
